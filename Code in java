package datastructures;

import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;
import java.util.Stack;

public class Graph {
    LinkedList<Integer> adj[];
	public  Graph(int v) {
		adj=new LinkedList[v];
		for(int i=0;i<v;i++) {
			adj[i]=new LinkedList<>();
		}
	}
	public void addEdge(int source ,int destination) {
		adj[source].add(destination);
		adj[destination].add(source);
		
	}
	public void print() {
		for(int i=0;i<adj.length;i++) {
			System.out.println("Neighbours of vertex "+ i+" is");
			for(int j=0;j<adj[i].size();j++)
			System.out.println(adj[i].get(j));
		}
	}
	public int bfs(int source ,int destination)  {
		Queue<Integer> queue=new LinkedList<>();
		boolean[] visited=new boolean[adj.length];
		int parent[]=new int[adj.length];
		queue.add(source);
		parent[source]=-1;
		visited[source]=true;
		while(!queue.isEmpty()) {
			int curr=queue.poll();
			if(curr==destination)break;
			for(int neighbour:adj[curr]) {
				if(!visited[neighbour]) {
					queue.add(neighbour);
					visited[neighbour]=true;
					parent[neighbour]=curr;
					}
			}
			
		}
		int curr=destination;
		int distance = 0;
		while(parent[curr]!=1) {
			distance++;
			curr=parent[curr];
			
		}
		return distance;
	}
	public boolean dfs(int source, int destination) {
		boolean[] visited=new boolean[adj.length];
		visited[source]=true;
	    return dfsutil(source , destination,visited);
	}
	private boolean dfsutil(int source, int destination, boolean[] visited) {
		if(source==destination) return true;
		for(int neighbours:adj[source]) {
			if(!visited[neighbours]) {
				visited[neighbours]=true;
				boolean t=dfsutil(neighbours,destination,visited);
				if(t) return t;
			}
			}
			return false;
		}
    public boolean dfsstack(int source, int destination) {
    	boolean visited[]=new boolean[adj.length];
    	visited[source]=true;
    	Stack<Integer> stack=new Stack<>();
    	stack.push(source);
    	while(!stack.isEmpty()) {
    		int cur=stack.pop();
    		if(cur==destination)return true;
    		for(int neighbours:adj[cur]) {
    			if(!visited[neighbours]) {
    				visited[neighbours]=true;
    				stack.push(neighbours);
    			}
    		}
    	}
    	return false;
    }
	public static void main(String[] args) {
		Scanner sc=new Scanner(System.in);
		System.out.println("Enter number of vertex and edges");
        int n=sc.nextInt();
        int e=sc.nextInt();
        Graph graph=new Graph(n);
        for(int i=0;i<e;i++) {
        	System.out.println("Enter source and destination");
        	int source=sc.nextInt();
        	int destination=sc.nextInt();
        	graph.addEdge(source,destination);
        }
         if(graph.cyin()) System.out.println("Graph is cyclic");
         else System.out.println("Graph is acyclic");
      //  graph.print();
	}
	public boolean cyin() {
		boolean visited[]=new boolean[adj.length];
		boolean recstack[]=new boolean[adj.length];
		for(int i=0;i<adj.length;i++) {
			if(cy(i,recstack,visited)) return true;
		}
		return false;
	}
	boolean cy(int i,boolean[] recstack,boolean[] visited) {
		if(recstack[i]) return true;
		if(visited[i]) return false;
		recstack[i]=true;
		visited[i]=true;
		for(int neighbours:adj[i]) {
			if(cy(neighbours,recstack,visited))return true;
		}
		recstack[i]=false;
		return false;
	}
	boolean cybfs() {
		int indegree[]=new int[adj.length];
		for(int i=0;i<adj.length;i++) {
		   for(int j:adj[i]) 
			   indegree[j]++;
		   }
		Queue<Integer> queue=new LinkedList<>();
		for(int i=0;i<adj.length;i++) {
			if(indegree[i]==0) {
				queue.add(i);
			}
		}
		int cnt=0;
		while(!queue.isEmpty()) {
			int u=queue.poll();
			for(int neighbours:adj[u]) {
				if(--indegree[neighbours]==0) {
				  queue.add(neighbours)	;
				}
			}
			cnt++;
		}
		if(cnt!=adj.length) return true;
		else return false;
	}
	boolean iscyundirected() {
		boolean visited[]=new boolean[adj.length];
		int parent=-1;
		for(int i=0;i<adj.length;i++) {
			if(!visited[i])
			if(cyinun(i,visited,parent)) return true;
		}
        return false;		
	}
	boolean cyinun(int i, boolean[] visited,int parent) {
		visited[i]=true;
		for(int neigh:adj[i]) {
			if(!visited[neigh]) {
				if(cyinun(neigh,visited,i)) return true;
				
			}
			else if(neigh!=parent) {
				return true;
			}
		}
		return false;
	}

}
